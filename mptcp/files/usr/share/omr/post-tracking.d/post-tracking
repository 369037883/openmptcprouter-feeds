# vim: set ft=sh noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 :

SETROUTE=false
set_route() {
	local multipath_config interface_gw interface_if
	INTERFACE=$1
	PREVINTERFACE=$2
	multipath_config=$(uci -q get network.$INTERFACE.multipath || echo "off")
	interface_if=$(uci -q get network.$INTERFACE.ifname)
	[ -z "$interface_if" ] && interface_if=$(ifstatus "$INTERFACE" 2>/dev/null | jsonfilter -q -e '@["l3_device"]')
	[ -z "$interface_if" ] && interface_if=$(ifstatus "${INTERFACE}_4" 2>/dev/null | jsonfilter -q -e '@["l3_device"]')
	multipath_current_config=$(multipath $interface_if | grep 'deactivated')
	if [ "$multipath_config" != "off" ] && [ "$SETROUTE" != true ] && [ "$INTERFACE" != "$PREVINTERFACE" ] && [ "$multipath_current_config" = "" ]; then
		interface_gw="$(uci -q get network.$INTERFACE.gateway)"
		if [ -z "$interface_gw" ]; then
			interface_gw=$(ubus call network.interface.$INTERFACE status 2>/dev/null | jsonfilter -q -l 1 -e '@.inactive.route[@.target="0.0.0.0"].nexthop' | tr -d "\n")
		fi
		if [ -z "$interface_gw" ]; then
			interface_gw=$(ubus call network.interface.$INTERFACE status 2>/dev/null | jsonfilter -q -l 1 -e '@.route[@.target="0.0.0.0"].nexthop' | tr -d "\n")
		fi
		if [ -z "$interface_gw" ]; then
			interface_gw=$(ubus call network.interface.${INTERFACE}_4 status 2>/dev/null | jsonfilter -q -l 1 -e '@.inactive.route[@.target="0.0.0.0"].nexthop' | tr -d "\n")
		fi
		if [ "$interface_gw" != "" ]; then
			_log "$PREVINTERFACE down. Replace default route by $interface_gw dev $interface_if"
			ip route replace default scope global nexthop via $interface_gw dev $interface_if && SETROUTE=true
			ip route replace default via $interface_gw dev $interface_if table 991337
			if [ "$(uci -q get openmptcprouter.settings.uci_route)" = "1" ]; then
				uci -q batch <<-EOF >/dev/null
					set network.default_route=route
					set network.default_route.interface=$INTERFACE
					set network.default_route.target='0.0.0.0'
					set network.default_route.netmask='0.0.0.0'
					set network.default_route.gateway=$interface_gw
					set network.default_route.created=tracker
					commit network.default_route
					set network.default_fw_route=route
					set network.default_fw_route.interface=$INTERFACE
					set network.default_fw_route.target='0.0.0.0'
					set network.default_fw_route.netmask='0.0.0.0'
					set network.default_fw_route.gateway=$interface_gw
					set network.default_fw_route.table=991337
					set network.default_fw_route.created=tracker
					commit network.default_fw_route
				EOF
			fi
			#SETROUTE=true
		fi
	fi
}

set_server_default_route() {
	local server=$1
	local serverip
	config_get serverip $server ip
	multipath_config_route=$(uci -q get network.$OMR_TRACKER_INTERFACE.multipath || echo "off")
	if [ "$serverip" != "" ] && [ "$OMR_TRACKER_DEVICE_GATEWAY" != "" ] && [ "$(ip route show dev $OMR_TRACKER_DEVICE metric 1 | grep $serverip | grep $OMR_TRACKER_DEVICE_GATEWAY)" = "" ] && [ "$multipath_config_route" != "off" ]; then
		_log "Set server $server ($serverip) default route via $OMR_TRACKER_DEVICE_GATEWAY"
		if [ "$(uci -q get openmptcprouter.settings.uci_route)" = "1" ]; then
			uci -q batch <<-EOF >/dev/null
				set network.server_${server}_default_route=route
				set network.server_${server}_default_route.interface=$OMR_TRACKER_INTERFACE
				set network.server_${server}_default_route.target=$serverip
				set network.server_${server}_default_route.netmask='255.255.255.255'
				set network.server_${server}_default_route.gateway=$OMR_TRACKER_DEVICE_GATEWAY
				set network.server_${server}_default_route.metric=1
				set network.server_${server}_default_route.created=tracker
				commit network.server_${server}_default_route
			EOF
		fi
		ip route replace $serverip via $OMR_TRACKER_DEVICE_GATEWAY dev $OMR_TRACKER_DEVICE metric 1
	fi
}

set_server_route() {
	local server=$1
	local serverip
	config_get serverip $server ip
	local metric=$2
	[ -z "$metric" ] && metric=$(uci -q get network.$OMR_TRACKER_INTERFACE.metric)
	multipath_config_route=$(uci -q get network.$OMR_TRACKER_INTERFACE.multipath || echo "off")
	interface_if=$(uci -q get network.$OMR_TRACKER_INTERFACE.ifname)
	[ -z "$interface_if" ] && interface_if=$(ifstatus "$OMR_TRACKER_INTERFACE" 2>/dev/null | jsonfilter -q -e '@["l3_device"]')
	[ -z "$interface_if" ] && interface_if=$(ifstatus "${OMR_TRACKER_INTERFACE}_4" 2>/dev/null | jsonfilter -q -e '@["l3_device"]')
	multipath_current_config=$(multipath $interface_if | grep "deactivated")
	if [ "$serverip" != "" ] && [ "$OMR_TRACKER_DEVICE_GATEWAY" != "" ] && [ "$(ip route show dev $OMR_TRACKER_DEVICE metric $metric | grep $serverip | grep $OMR_TRACKER_DEVICE_GATEWAY)" = "" ] && [ "$multipath_config_route" != "off" ] && [ "$multipath_current_config" = "" ]; then
		_log "Set server $server ($serverip) route via $OMR_TRACKER_DEVICE_GATEWAY metric $metric"
		if [ "$(uci -q get openmptcprouter.settings.uci_route)" = "1" ]; then
			uci -q batch <<-EOF >/dev/null
				set network.server_${server}_${OMR_TRACKER_INTERFACE}_route=route
				set network.server_${server}_${OMR_TRACKER_INTERFACE}_route.interface=$OMR_TRACKER_INTERFACE
				set network.server_${server}_${OMR_TRACKER_INTERFACE}_route.target=$serverip
				set network.server_${server}_${OMR_TRACKER_INTERFACE}_route.netmask='255.255.255.255'
				set network.server_${server}_${OMR_TRACKER_INTERFACE}_route.gateway=$OMR_TRACKER_DEVICE_GATEWAY
				set network.server_${server}_${OMR_TRACKER_INTERFACE}_route.metric=$metric
				set network.server_${server}_${OMR_TRACKER_INTERFACE}_route.created=tracker
				commit network.server_${server}_${OMR_TRACKER_INTERFACE}_route
			EOF
		fi
		ip route replace $serverip via $OMR_TRACKER_DEVICE_GATEWAY dev $OMR_TRACKER_DEVICE metric $metric
	fi
	if [ "$OMR_TRACKER_DEVICE_GATEWAY" != "" ]; then
		ip route replace default via $OMR_TRACKER_DEVICE_GATEWAY dev $OMR_TRACKER_DEVICE metric $metric
		if [ "$(uci -q get openmptcprouter.settings.uci_route)" = "1" ]; then
			uci -q batch <<-EOF >/dev/null
				delete network.${OMR_TRACKER_INTERFACE}_route_default_metric
				set network.${OMR_TRACKER_INTERFACE}_route_default_metric=route
				set network.${OMR_TRACKER_INTERFACE}_route_default_metric.interface=$OMR_TRACKER_INTERFACE
				set network.${OMR_TRACKER_INTERFACE}_route_default_metric.target='0.0.0.0'
				set network.${OMR_TRACKER_INTERFACE}_route_default_metric.netmask='0.0.0.0'
				set network.${OMR_TRACKER_INTERFACE}_route_default_metric.gateway=$OMR_TRACKER_DEVICE_GATEWAY
				set network.${OMR_TRACKER_INTERFACE}_route_default_metric.metric=$metric
				#set network.${OMR_TRACKER_INTERFACE}_route_default_metric.source=$OMR_TRACKER_DEVICE_IP
				set network.${OMR_TRACKER_INTERFACE}_route_default_metric.created=tracker
				commit network.${OMR_TRACKER_INTERFACE}_route_default_metric
			EOF
		fi
	fi
}

del_server_route() {
	local server=$1
	local serverip
	config_get serverip $server ip
	_log "Delete $server ($serverip) route via $OMR_TRACKER_DEVICE_GATEWAY dev $OMR_TRACKER_DEVICE"
	if [ "$(uci -q get openmptcprouter.settings.uci_route)" = "1" ]; then
		uci -q batch <<-EOF >/dev/null
			delete network.server_${server}_${OMR_TRACKER_INTERFACE}_route
			delete network.${OMR_TRACKER_INTERFACE}_route_default_metric
			commit network
		EOF
	fi
	local metric
	metric=$(uci -q get network.$OMR_TRACKER_INTERFACE.metric)
	ip route del $serverip dev $OMR_TRACKER_DEVICE metric $metric >/dev/null 2>&1
	ip route del $serverip dev $OMR_TRACKER_DEVICE >/dev/null 2>&1
	ip route del $serverip dev $OMR_TRACKER_DEVICE >/dev/null 2>&1
	ip route del default via $OMR_TRACKER_DEVICE_GATEWAY dev $OMR_TRACKER_DEVICE >/dev/null 2>&1
}

dns_flush() {
	unbound-control flush-negative >/dev/null 2>&1
	unbound-control flush-bogus >/dev/null 2>&1
}

if [ -n "$RANDOM" ]; then
	sleep `expr $RANDOM % 10`
else
	sleep `awk 'BEGIN{srand();print int(rand()*9)}'`
fi

# Get the current multipath status
multipath_status="off"
if [ -d "/sys/class/net/$OMR_TRACKER_DEVICE" ]; then
	case "$(multipath "$OMR_TRACKER_DEVICE")" in
		*default*)      multipath_status="on"       ;;
		*backup*)       multipath_status="backup"   ;;
		*handover*)     multipath_status="handover" ;;
	esac
fi

default_gw=$(ip route show default | grep -v "metric" | awk '/default/ {print $3}')
#current_interface_gw=$(uci -q get "network.$OMR_TRACKER_INTERFACE.gateway")

# An interface in error will never be used in MPTCP
if [ "$OMR_TRACKER_STATUS" = "ERROR" ]; then
	if [ "$OMR_TRACKER_PREV_STATUS" = "$OMR_TRACKER_STATUS" ]; then
		exit 0
	fi
	[ "$multipath_status" = "off" ] || {
		if [ "$OMR_TRACKER_STATUS_MSG" = "" ]; then
			_log "$OMR_TRACKER_DEVICE switched off"
		else
			_log "$OMR_TRACKER_DEVICE switched off because $OMR_TRACKER_STATUS_MSG"
		fi
		uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.state='down'
		if [ "$(sysctl -n net.mptcp.mptcp_enabled | tr -d '\n')" = "1" ]; then
			multipath "$OMR_TRACKER_DEVICE" off > /dev/null 2>&1
		fi
		if [ -n "$OMR_TRACKER_DEVICE_IP" ]; then
			glorytun-udp path $OMR_TRACKER_DEVICE_IP dev tun0 down > /dev/null 2>&1
		fi
		config_load openmptcprouter
		config_foreach del_server_route server
	}

	if [ "$default_gw" = "$OMR_TRACKER_DEVICE_GATEWAY" ] || [ "$default_gw" = "" ]; then
		config_load network
		config_foreach set_route interface $OMR_TRACKER_INTERFACE
	fi
	mail_alert="$(uci -q get omr-tracker.$OMR_TRACKER_INTERFACE.mail_alert)"
	[ -z "$mail_alert" ] && mail_alert="$(uci -q get omr-tracker.defaults.mail_alert)"
	[ "$mail_alert" = "1" ] && {
		if [ "$OMR_TRACKER_STATUS_MSG" = "" ]; then
			echo -e "Subject: OpenMPTCProuter: $OMR_TRACKER_INTERFACE ($OMR_TRACKER_DEVICE) is down\n\nOpenMPTCProuter detected a connection failure of $OMR_TRACKER_INTERFACE ($OMR_TRACKER_DEVICE)." | sendmail $(uci -q get mail.default.to)
		else
			echo -e "Subject: OpenMPTCProuter: $OMR_TRACKER_INTERFACE ($OMR_TRACKER_DEVICE) is down\n\nOpenMPTCProuter detected a connection failure of $OMR_TRACKER_INTERFACE ($OMR_TRACKER_DEVICE). The reason is \"$OMR_TRACKER_STATUS_MSG\"." | sendmail $(uci -q get mail.default.to)
		fi
	}

	if [ "$OMR_TRACKER_INTERFACE" = "glorytun" ] || [ "$OMR_TRACKER_INTERFACE" = "omrvpn" ]; then
		if [ "$OMR_TRACKER_STATUS_MSG" = "" ]; then
			_log "$OMR_TRACKER_INTERFACE down"
		else
			_log "$OMR_TRACKER_INTERFACE down because $OMR_TRACKER_STATUS_MSG"
		fi
		config_load network
		config_foreach set_route interface $OMR_TRACKER_INTERFACE
		if [ "$(uci -q get shadowsocks-libev.sss0.disabled)" != "1" ] && [ "$(uci -q get openmptcprouter.omr.shadowsocks)" = "up" ] && [ "$(uci -q get shadowsocks-libev.ss_rules.redir_udp)" = "" ] && [ "$(uci -q get shadowsocks-libev.hi2.mode)" = "tcp_and_udp" ]; then
			_log "Tunnel down use ShadowSocks for UDP"
			uci -q set shadowsocks-libev.ss_rules.redir_udp='hi2'
			if /etc/init.d/shadowsocks-libev rules_exist ; then
				/etc/init.d/shadowsocks-libev rules_down
				/etc/init.d/shadowsocks-libev rules_up
			fi
		fi
	fi
	dns_flush
	uci -q delete openmptcprouter.$OMR_TRACKER_INTERFACE.lc
	uci -q commit openmptcprouter
	#ubus call network reload
	exit 0
fi

if [ "$OMR_TRACKER_INTERFACE" = "glorytun" ] || [ "$OMR_TRACKER_INTERFACE" = "omrvpn" ]; then
	if [ "$default_gw" != "$OMR_TRACKER_DEVICE_GATEWAY" ] || [ "$default_gw" = "" ]; then
		_log "Tunnel up : Replace default route by $OMR_TRACKER_DEVICE_GATEWAY dev $OMR_TRACKER_DEVICE"
		if [ "$(uci -q get openmptcprouter.settings.uci_route)" = "1" ]; then
			uci -q batch <<-EOF >/dev/null
				set network.default_route=route
				set network.default_route.interface=$OMR_TRACKER_INTERFACE
				set network.default_route.target='0.0.0.0'
				set network.default_route.netmask='0.0.0.0'
				set network.default_route.gateway=$OMR_TRACKER_DEVICE_GATEWAY
				set network.default_route.created=tracker
				commit network.default_route
			EOF
		fi
		ip route replace default scope global nexthop via $OMR_TRACKER_DEVICE_GATEWAY dev $OMR_TRACKER_DEVICE
	fi
	if [ "$(uci -q get shadowsocks-libev.sss0.disabled)" != "1" ] && [ "$(uci -q get shadowsocks-libev.ss_rules.redir_udp)" = "hi2" ]; then
		_log "Tunnel up disable use of ShadowSocks for UDP"
		uci -q delete shadowsocks-libev.ss_rules.redir_udp
		if /etc/init.d/shadowsocks-libev rules_exist ; then
			/etc/init.d/shadowsocks-libev rules_down
			/etc/init.d/shadowsocks-libev rules_up
		fi
	fi

	# Set VPN MTU
	if [ -n "$OMR_TRACKER_LATENCY" ] && ([ "$(uci -q get openmptcprouter.$OMR_TRACKER_INTERFACE.lc)" = "" ] || [ $(($(date +"%s") - $(uci -q get openmptcprouter.$OMR_TRACKER_INTERFACE.lc))) -gt 3600 ]); then
		local serverip=$(uci -q get shadowsocks-libev.sss0.server)
		uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE=interface
		uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.latency="$OMR_TRACKER_LATENCY"
		if [ -n "$(uci -q get network.$OMR_TRACKER_INTERFACE.mtu)" ]; then
			mtu=$(uci -q get network.$OMR_TRACKER_INTERFACE.mtu)
			uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.mtu=$mtu
			ip link set dev $OMR_TRACKER_DEVICE mtu $mtu > /dev/null 2>&1
			uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.lc=$(date +"%s")
		elif [ -z "$(uci -q get openmptcprouter.$OMR_TRACKER_INTERFACE.mtu)" ]; then
			[ -n "$serverip" ] && [ "$serverip" != "127.0.0.1" ] && {
				local mtu=$(omr-mtu $OMR_TRACKER_DEVICE_IP $serverip)
				[ -n "$mtu" ] && {
					uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.mtu=$mtu
					ip link set dev $OMR_TRACKER_DEVICE mtu $mtu > /dev/null 2>&1
					uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.lc=$(date +"%s")
				}
			}
		else
			uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.lc=$(date +"%s")
		fi
		uci -q commit openmptcprouter
	fi
	#ubus call network reload
	exit 0
fi

if [ "$OMR_TRACKER_PREV_STATUS" != "" ] && [ "$OMR_TRACKER_PREV_STATUS" != "$OMR_TRACKER_STATUS" ]; then
	mail_alert="$(uci -q get omr-tracker.$OMR_TRACKER_INTERFACE.mail_alert)"
	[ -z "$mail_alert" ] && mail_alert="$(uci -q get omr-tracker.defaults.mail_alert)"
	[ "$mail_alert" = "1" ] && echo -e "Subject: OpenMPTCProuter: $OMR_TRACKER_INTERFACE ($OMR_TRACKER_DEVICE) is up\n\nOpenMPTCProuter detected that connection $OMR_TRACKER_INTERFACE ($OMR_TRACKER_DEVICE) is up again." | sendmail $(uci -q get mail.default.to)
	uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.state='up'
	uci -q commit openmptcprouter
	dns_flush
fi

multipath_config=$(uci -q get "network.$OMR_TRACKER_INTERFACE.multipath" || echo "off")
if [ "$multipath_config" = "master" ]; then
	if [ "$default_gw" != "$OMR_TRACKER_DEVICE_GATEWAY" ] || [ "$default_gw" = "" ]; then
		omrvpn_intf=$(uci -q get "network.omrvpn.ifname" || echo "tun")
		if [ -n "$omrvpn_intf" ] && [ "$(ip route show default | grep -v metric | awk '/default/ {print $5}' | grep $omrvpn_intf)" = "" ]; then
			_log "Master up : Replace default route by $OMR_TRACKER_DEVICE_GATEWAY dev $OMR_TRACKER_DEVICE"
			if [ "$(uci -q get openmptcprouter.settings.uci_route)" = "1" ]; then
				uci -q batch <<-EOF >/dev/null
					set network.default_route=route
					set network.default_route.interface=$OMR_TRACKER_INTERFACE
					set network.default_route.target='0.0.0.0'
					set network.default_route.netmask='0.0.0.0'
					set network.default_route.gateway=$OMR_TRACKER_DEVICE_GATEWAY
					set network.default_route.created=tracker
					commit network.default_route
				EOF
			fi
			ip route replace default scope global nexthop via $OMR_TRACKER_DEVICE_GATEWAY dev $OMR_TRACKER_DEVICE
		else
			config_load openmptcprouter
			config_foreach set_server_default_route server
		fi
		ip route replace default via $OMR_TRACKER_DEVICE_GATEWAY dev $OMR_TRACKER_DEVICE table 991337
		if [ "$(uci -q get openmptcprouter.settings.uci_route)" = "1" ]; then
			uci -q batch <<-EOF >/dev/null
				set network.default_fw_route=route
				set network.default_fw_route.interface=$OMR_TRACKER_INTERFACE
				set network.default_fw_route.target='0.0.0.0'
				set network.default_fw_route.netmask='0.0.0.0'
				set network.default_fw_route.gateway=$OMR_TRACKER_DEVICE_GATEWAY
				set network.default_fw_route.table=991337
				set network.default_fw_route.created=tracker
				commit network.default_fw_route
			EOF
		fi
	fi
	multipath_config="on"
fi
if [ -n "$OMR_TRACKER_DEVICE_IP" ] && [ -n "$OMR_TRACKER_DEVICE_GATEWAY" ]; then
	config_load openmptcprouter
	config_foreach set_server_route server
fi

[ "$multipath_config" = "on" ] && {
	download="$(uci -q get sqm.$OMR_TRACKER_INTERFACE.download)"
	upload="$(uci -q get sqm.$OMR_TRACKER_INTERFACE.download)"
	if [ "$download" != "0" ] && [ "$download" != "" ] && [ "$upload" != "0" ] && [ "$upload" != "" ]; then
		glorytun-udp path up $OMR_TRACKER_DEVICE_IP dev tun0 rate tx $upload rx $download  > /dev/null 2>&1
	else
		glorytun-udp path $OMR_TRACKER_DEVICE_IP dev tun0 up rate rx 12500000 tx 12500000 > /dev/null 2>&1
	fi
}
[ "$multipath_config" = "backup" ] && glorytun-udp path $OMR_TRACKER_DEVICE_IP dev tun0 backup rate rx 12500000 tx 12500000 > /dev/null 2>&1
[ "$multipath_status" = "$multipath_config" ] || {
	if [ "$(sysctl -n net.mptcp.mptcp_enabled | tr -d '\n')" = "1" ]; then
		_log "Multipath $OMR_TRACKER_DEVICE switched to $multipath_config"
		multipath "$OMR_TRACKER_DEVICE" "$multipath_config"
	fi
}
#ubus call network reload

# Save wan settings for status page
if [ "$(uci -q get openmptcprouter.$OMR_TRACKER_INTERFACE.lc)" = "" ] || [ $(($(date +"%s") - $(uci -q get openmptcprouter.$OMR_TRACKER_INTERFACE.lc))) -gt 3600 ]; then
	_log "Get status and settings for $OMR_TRACKER_INTERFACE..."
	if [ "$(uci -q get openmptcprouter.settings.external_check)" != "0" ]; then
		local ipaddr="$(omr-ip-intf $OMR_TRACKER_DEVICE)"
	fi
	[ -n "$ipaddr" ] && {
		# Check if we can get a IPv6 address, if yes enable RA else disable
		local ip6addr="$(curl -s -6 -m 3 http://ipv6.openmptcprouter.com/)"
		[ -z "$ip6addr" ] && {
			local ip6addr="$(curl -s -6 -m 3 http://ifconfig.co/)"
		}
		if [ "$(uci -q get openmptcprouter.settings.ipv6_disable)" = "0" ]; then
			if [ -n "$ip6addr" ] && [ "$(uci -q get dhcp.lan.ra_default)" != 1 ]; then
				_log "Enable IPv6 RA"
				uci -q set dhcp.lan.ra=server
				uci -q set dhcp.lan.ra_default=1
				uci -q set dhcp.lan.dhcpv6=server
				/etc/init.d/odhcpd start > /dev/null 2>&1
				/etc/init.d/odhcpd enable > /dev/null 2>&1
			elif [ -z "$ip6addr" ] && [ "$(uci -q set dhcp.lan.ra_default)" = 1 ]; then
				_log "Disable IPv6 RA"
				uci -q delete dhcp.lan.ra
				uci -q delete dhcp.lan.dhcpv6
				/etc/init.d/odhcpd start > /dev/null 2>&1
				/etc/init.d/odhcpd enable > /dev/null 2>&1
			fi
		fi
		if [ "$(uci -q get openmptcprouter.settings.external_check)" != "0" ]; then
			local asn="$(wget -4 -qO- -T 5 http://api.iptoasn.com/v1/as/ip/$ipaddr | jsonfilter -q -e '@.as_description')"
			[ -z "$asn" ] && {
				asn="$(whois $ipaddr 2>/dev/null | grep -m 1 -i 'netname' | awk '{print $2}')"
			}
		fi
		[ -z "$(uci -q get openmptcprouter.$OMR_TRACKER_INTERFACE)" ] && {
			uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE=interface
		}
		if [ "$(uci -q get openmptcprouter.latest_versions.lc)" = "" ] || [ $(($(date +"%s") - $(uci -q get openmptcprouter.latest_versions.lc))) -gt 3600 ]; then
			local latestversions="$(wget -4 -qO- -T 5 http://www.openmptcprouter.com/version/version.json)"
			[ -n "$latestversions" ] && {
				uci -q set openmptcprouter.latest_versions=latest_versions
				uci -q set openmptcprouter.latest_versions.omr=$(echo $latestversions | jsonfilter -q -e '@.omr')
				uci -q set openmptcprouter.latest_versions.vps=$(echo $latestversions | jsonfilter -q -e '@.vps')
				uci -q set openmptcprouter.latest_versions.lc=$(date +"%s")
			}
		fi
		local serverip=$(uci -q get shadowsocks-libev.sss0.server)
		[ -n "$serverip" ] && [ "$serverip" != "127.0.0.1" ] && {
			omrtracebox="$(omr-tracebox-mptcp $serverip $OMR_TRACKER_DEVICE)"
			[ -n "$omrtracebox" ] && uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.mptcp_status="$omrtracebox"
		}
		[ -n "$ipaddr" ] && uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.publicip="$ipaddr"
		[ -n "$OMR_TRACKER_LATENCY" ] && uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.latency="$OMR_TRACKER_LATENCY"
		[ -n "$asn" ] && {
			uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.asn="$asn"
		}
		if [ -n "$(uci -q get network.$OMR_TRACKER_INTERFACE.mtu)" ]; then
			mtu=$(uci -q get network.$OMR_TRACKER_INTERFACE.mtu)
			[ -n "$mtu" ] && {
				uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.mtu=$mtu
				ip link set dev $OMR_TRACKER_DEVICE mtu $mtu > /dev/null 2>&1
			}
			uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.lc=$(date +"%s")
		elif [ -z "$(uci -q get openmptcprouter.$OMR_TRACKER_INTERFACE.mtu)" ]; then
			[ -n "$serverip" ] && [ "$serverip" != "127.0.0.1" ] && {
				local mtu=$(omr-mtu $OMR_TRACKER_DEVICE_IP $serverip)
				[ -n "$mtu" ] && {
					uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.mtu=$mtu
					ip link set dev $OMR_TRACKER_DEVICE mtu $mtu > /dev/null 2>&1
				}
				[ -n "$mtu" ] && [ -n "$asn" ] && {
					uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.lc=$(date +"%s")
				}
			} || {
				uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.lc=$(date +"%s")
			}
		elif [ -n "$asn" ]; then
			uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.lc=$(date +"%s")
		fi
	}
	if [ "$(uci -q get shadowsocks-libev.sss0.server)" != "" ] && [ "$(uci -q get openmptcprouter.settings.external_check)" = "0" ]; then
		if ping -c 1 $(uci -q get shadowsocks-libev.sss0.server) &> /dev/null; then
			uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.lc=$(date +"%s")
		fi
	fi
	if [ "$(uci -q get openmptcprouter.$OMR_TRACKER_INTERFACE.lc)" = "" ] || [ $(($(date +"%s") - $(uci -q get openmptcprouter.$OMR_TRACKER_INTERFACE.lc))) -gt 3600 ]; then
		uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.lc=$(( $(date +"%s") - 3400 ))
		_log "Get status and settings for $OMR_TRACKER_INTERFACE... Failed"
	else
		_log "Get status and settings for $OMR_TRACKER_INTERFACE... Done"
		/etc/init.d/openmptcprouter-vps restart >/dev/null 2>&1
	fi
	uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.state='up'
	uci -q commit openmptcprouter
	dns_flush
fi

[ -n "$OMR_TRACKER_LATENCY" ] && {
	[ "$(uci -q get openmptcprouter.$OMR_TRACKER_INTERFACE.latency)" != "" ] && uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.latency_previous="$(uci -q get openmptcprouter.$OMR_TRACKER_INTERFACE.latency)"
	uci -q set openmptcprouter.$OMR_TRACKER_INTERFACE.latency="$OMR_TRACKER_LATENCY"
	if [ "$multipath_config" = "on" ] && [ "$(uci -q get network.$OMR_TRACKER_INTERFACE.multipath)" != "master" ] && ([ "$(uci -q get openmptcprouter.settings.master)" = "dynamic" ] || (([ "$(uci -q get openmptcprouter.settings.master)" = "change" ] || [ "$(uci -q get openmptcprouter.settings.master)" = "" ]) && [ "$(uci -q get openmptcprouter.settings.master_lcintf | grep $OMR_TRACKER_INTERFACE)" = "" ])); then
		masterintf="$(uci -q show network | grep multipath=\'master\' | cut -d'.' -f2)"
		masterlatency="$(uci -q get openmptcprouter.$masterintf.latency | tr -d '\n')"
		if [ -z "$masterlatency" ] || [ "$(uci -q get openmptcprouter.$masterintf.state)" = "down" ]; then
			masterlatency=1000
		fi
		if [ -n "$masterintf" ] && ([ "$masterlatency" != "" ] || [ "$(uci -q get openmptcprouter.$masterintf.state)" = "down" ]); then
			if (([ "$(uci -q get openmptcprouter.settings.master)" = "change" ] || [ "$(uci -q get openmptcprouter.settings.master)" = "" ]) && [ "$OMR_TRACKER_LATENCY" -lt "$((masterlatency/2))" ]) || ([ "$(uci -q get openmptcprouter.settings.master)" = "dynamic" ] && [ "$OMR_TRACKER_LATENCY" -lt "$((masterlatency/2))" ] && [ "$(uci -q get openmptcprouter.$OMR_TRACKER_INTERFACE.latency_previous)" -lt "$((masterlatency/2))" ]); then
				uci -q set network.$masterintf.multipath='on'
				uci -q set network.$OMR_TRACKER_INTERFACE.multipath='master'
				uci -q add_list openmptcprouter.settings.master_lcintf="$OMR_TRACKER_INTERFACE"
				if [ "$(uci -q get openmptcprouter.settings.master)" != "dynamic" ]; then
					uci -q commit network
				fi
				_log "Change master interface from $masterintf ($masterlatency ms) to $OMR_TRACKER_INTERFACE ($OMR_TRACKER_LATENCY ms)"
			fi
		fi
	fi
}

# If a service is down, force restart it
if [ "$(pgrep ss-redir)" = "" ] && [ "$(uci -q get shadowsocks-libev.sss0.disabled)" = "0" ]; then
	_log "Can't find Shadowsocks, restart it..."
	/etc/init.d/shadowsocks-libev restart
	sleep 5
fi
if [ "$(pgrep glorytun)" = "" ] && [ "$(uci -q get glorytun.vpn.enabled)" = "1" ]; then
	_log "Can't find Glorytun, restart it..."
	/etc/init.d/glorytun restart
	/etc/init.d/glorytun-udp restart
	sleep 5
fi
if [ "$(pgrep openvpn)" = "" ] && [ "$(uci -q get openvpn.omr.enabled)" != "0" ]; then
	_log "Can't find OpenVPN, restart it..."
	/etc/init.d/openvpn restart
	sleep 5
fi
if [ "$(pgrep mlvpn)" = "" ] && [ "$(uci -q get mlvpn.general.enable)" != "0" ]; then
	_log "Can't find MLVPN, restart it..."
	/etc/init.d/mlvpn restart
	sleep 5
fi

set_get_config() {
	local server=$1
	[ -n "$server" ] && uci -q set openmptcprouter.${server}.get_config=1
}

if [ "$(uci -q get shadowsocks-libev.sss0.disabled)" = "0" ] && [ "$(uci -q get shadowsocks-libev.sss0.key)" = "" ]; then
	config_load openmptcprouter
	config_foreach set_get_config server
	uci -q commit openmptcprouter
fi
if [ "$(uci -q get glorytun.vpn.enable)" = "1" ] && [ "$(uci -q get glorytun.vpn.key)" = "" ]; then
	config_load openmptcprouter
	config_foreach set_get_config server
	uci -q commit openmptcprouter
fi

if [ "$(uci -q show openmptcprouter | grep get_config=\'1\')" != "" ] || [ "$(uci -q show openmptcprouter | grep admin_error=\'1\')" != "" ]; then
	/etc/init.d/openmptcprouter-vps restart >/dev/null 2>&1
	sleep 5
fi